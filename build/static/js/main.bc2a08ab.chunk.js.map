{"version":3,"sources":["logo.svg","Termin.js","TerminTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Termin","setEditMode","useState","termins","setTermins","dif","setDif","useEffect","loadTermins","localStorage","getItem","JSON","parse","sort","a","b","start","moment","datetime","end","duration","diff","asSeconds","currentTermin","i","length","active","isAfter","id","tableData","time","format","event","setTimeout","findCurrentTermin","timer","setInterval","Date","getCountDownTo","clearInterval","className","onClick","pageMode","leftTime","toISOString","substr","src","Logo","alt","style","fontSize","TerminTable","tableIcons","Add","forwardRef","props","ref","Check","Clear","Delete","DetailPanel","Edit","Filter","FirstPage","LastPage","NextPage","PreviousPage","ResetSearch","Search","SortArrow","ThirdStateCheck","ViewColumn","title","field","type","initialEditValue","columns","data","setData","loadFromLocal","icons","editable","onRowAdd","newData","Promise","resolve","reject","onRowUpdate","oldData","dataUpdate","onRowDelete","dataDelete","index","splice","removeItem","setItem","stringify","App","editMode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc2a08ab.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.2d00cd9d.svg\";","import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport Logo from \"./logo.svg\";\n\nfunction Termin({ setEditMode }) {\n  const [termins, setTermins] = useState();\n  const [dif, setDif] = useState();\n\n  useEffect(() => {\n    var loadTermins = localStorage.getItem(\"termins\") || \"[]\";\n    if (loadTermins) {\n      setTermins(\n        JSON.parse(loadTermins).sort(function (a, b) {\n          let start = moment(a.datetime);\n          let end = moment(b.datetime);\n\n          if (moment.duration(end.diff(start)).asSeconds() > 0) {\n            return -1;\n          }\n          return 1;\n        })\n      );\n    }\n  }, []);\n\n  function findCurrentTermin() {\n    if (termins) {\n      for (let i = 0; i < termins.length; i++) {\n        if (\n          termins[i].active &&\n          moment(termins[i].datetime).isAfter(moment())\n        ) {\n          return {\n            id: termins[i].tableData.id,\n            datetime: moment(termins[i].datetime),\n            time: moment(termins[i].datetime).format(\"DD.MM.YYYY HH:mm:ss\"),\n            event: termins[i].event,\n            active: termins[i].active,\n          };\n        }\n      }\n      setTimeout(() => {\n        setEditMode(true);\n      }, 20000);\n    }\n  }\n  const currentTermin = findCurrentTermin();\n\n  const getCountDownTo = () => {\n    if (currentTermin) {\n      // calculate details\n      let start = moment(new Date());\n      let end = moment(currentTermin.datetime);\n      var dif = end.diff(start, \"seconds\");\n      setDif(dif);\n    }\n  };\n\n  useEffect(() => {\n    var timer = setInterval(() => getCountDownTo(), 1000);\n    return function cleanup() {\n      clearInterval(timer);\n    };\n  });\n\n  if (!termins) {\n    return <div>Loading...</div>;\n  }\n\n  if (!currentTermin || !dif) {\n    return (\n      <div className=\" box-border min-w-1/4 min-h-1/4 align-middle text-center border-4 border-green-900 pt-8 m-20 text-3xl\">\n        No more entries in the list, will be redirected to termin page in 20\n        seconds\n        <button\n          className=\"text-2xl border-4 rounded-lg border-green-600 ring-4 ring-pink-300 m-20 p-2\"\n          onClick={() => setEditMode(true)}\n        >\n          Go to the Edit Events\n        </button>\n      </div>\n    );\n  }\n\n  let pageMode = \"bg-black\";\n\n  if (dif < 600) pageMode = \"bg-yellow-400\";\n  if (dif < 300) pageMode = \"bg-red-600\";\n  if (dif < 120) pageMode = dif % 2 === 1 ? \"bg-yellow-400\" : \"bg-red-600\";\n  const leftTime = new Date(dif * 1000).toISOString().substr(11, 8);\n\n  return (\n    <div\n      className={`h-screen flex flex-col justify-between text-white w-full max-h-full ${pageMode}`}\n    >\n      <div className=\"flex flex-row justify-between bg-black  \">\n        <div className=\"border border-gray-400 p-2 m-2 text-sm\">\n          {moment().format(\"DD.MM.YYYY\")}\n        </div>\n        <div className=\"border border-gray-400 p-2 m-2 text-sm\">\n          {moment().format(\"HH:mm:ss\")}\n        </div>\n      </div>\n      <div className=\"text-5xl text-center font-bold bg-black\">\n        {currentTermin.time}\n        {' '}\n        {currentTermin.event}\n      </div>\n      <div className=\"flex justify-center\">\n        <img src={Logo} alt=\"Logo\" className=\"w-1/2 bg-white\" />\n      </div>\n      <div\n        className=\"text-9xl border-2 font-bold text-center ml-2 mr-2  bg-black\"\n        style={{ fontSize: \"50px\" }}\n      >\n        {leftTime}\n      </div>\n      <div className=\"flex  bg-black\">\n        <div\n          className=\"border border-gray-400 bg-yellow-200 text-lg text-black m-2 p-2 cursor-pointer\"\n          onClick={() => setEditMode(true)}\n        >\n          Edit Events\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Termin;\n","import React, { useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { forwardRef } from \"react\";\n\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\n\nconst TerminTable = ({ setEditMode }) => {\n  const tableIcons = {\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n    DetailPanel: forwardRef((props, ref) => (\n      <ChevronRight {...props} ref={ref} />\n    )),\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n    PreviousPage: forwardRef((props, ref) => (\n      <ChevronLeft {...props} ref={ref} />\n    )),\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n    SortArrow: forwardRef((props, ref) => (\n      <ArrowDownward {...props} ref={ref} />\n    )),\n    ThirdStateCheck: forwardRef((props, ref) => (\n      <Remove {...props} ref={ref} />\n    )),\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n  };\n\n  const [columns] = useState([\n    { title: \"Termin\", field: \"event\" },\n    { title: \"Date /Time\", field: \"datetime\", type: \"datetime\" },\n    { title: \"Active\", field: \"active\", type: \"boolean\", initialEditValue: 1 },\n  ]);\n\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    loadFromLocal();\n  }, []);\n\n  const loadFromLocal = () => {\n    var loadTermins = localStorage.getItem(\"termins\");\n    if (loadTermins) {\n      setData(JSON.parse(loadTermins) || []);\n    }\n  };\n\n  const saveToLocal = () => {\n    localStorage.removeItem(\"termins\");\n    localStorage.setItem(\"termins\", JSON.stringify(data));\n    setEditMode(false)\n  };\n  return (\n    <div className=\"h-screen\">\n      <MaterialTable\n        icons={tableIcons}\n        title=\"Termins\"\n        columns={columns}\n        data={data}\n        editable={{\n          onRowAdd: (newData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                setData([...data, newData]);\n\n                resolve();\n              }, 1000);\n            }),\n          onRowUpdate: (newData, oldData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const dataUpdate = [...data];\n                const index = oldData.tableData.id;\n                dataUpdate[index] = newData;\n                setData([...dataUpdate]);\n\n                resolve();\n              }, 1000);\n            }),\n          onRowDelete: (oldData) =>\n            new Promise((resolve, reject) => {\n              setTimeout(() => {\n                const dataDelete = [...data];\n                const index = oldData.tableData.id;\n                dataDelete.splice(index, 1);\n                setData([...dataDelete]);\n\n                resolve();\n              }, 1000);\n            }),\n        }}\n      />\n      <div className=\"flex justify-center absolute inset-x-0 bottom-0 \">\n        <div className=\"cursor-pointer border border-gray-400 m-2 p-2 text-sm \" onClick={saveToLocal}>Änderungen speichern </div>\n        <div className=\"cursor-pointer border border-gray-400 p-2 m-2 text-sm\" onClick={() => setEditMode(false)}>Zurück</div>\n      </div>\n    </div>\n  );\n};\n\nexport default TerminTable;\n","import React, { useState } from \"react\";\nimport Termin from \"./Termin\";\nimport TerminTable from \"./TerminTable\";\n\nfunction App() {\n  \n  const [editMode, setEditMode] = useState(false);\n  if (editMode) return <TerminTable setEditMode={setEditMode} />;\n  return <Termin setEditMode={setEditMode} />;\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}